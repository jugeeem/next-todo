{
	"info": {
		"_postman_id": "edeadda5-9618-4e98-a2d4-9b1809b56c48",
		"name": "next-todo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29632741"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "register",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"password\",\r\n  \"firstName\": \"\",\r\n  \"firstNameRuby\": \"\",\r\n  \"lastName\": \"\",\r\n  \"lastNameRuby\": \"\",\r\n  \"role\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "## ユーザー登録エンドポイント\n\nこのエンドポイントは、システムに新しいユーザーを登録することを可能にします。ユーザーの詳細情報を受け取り、登録が成功すると、認証用のトークンとともに確認を返します。\n\n### リクエスト\n\n**メソッド:** POST  \n**URL:** `http://localhost/api/auth/register`\n\n#### リクエストボディ\n\nリクエストはJSON形式で送信する必要があり、以下のパラメータを含む必要があります：\n\n- **username** (string): 新しいユーザーの希望するユーザー名。\n    \n- **password** (string): 新しいユーザーアカウントのパスワード。\n    \n- **firstName** (string, 任意): ユーザーの名前。\n    \n- **firstNameRuby** (string, 任意): ユーザーの名前のふりがな表記。\n    \n- **lastName** (string, 任意): ユーザーの姓。\n    \n- **lastNameRuby** (string, 任意): ユーザーの姓のふりがな表記。\n    \n- **role** (integer): ユーザーに割り当てられる権限（例：管理者、一般ユーザー）。\n    \n\n#### リクエストボディの例\n\n```json\n{\n  \"username\": \"user\",\n  \"password\": \"password\",\n  \"firstName\": \"\",\n  \"firstNameRuby\": \"\",\n  \"lastName\": \"\",\n  \"lastNameRuby\": \"\",\n  \"role\": 4\n}\n```\n\n### レスポンス\n\n登録が成功すると、APIはステータスコード`200`で応答し、以下の構造を含むJSONオブジェクトを返します：\n\n- **success** (boolean): 登録が成功したかどうかを示します。\n    \n- **data** (object): 登録されたユーザーの詳細情報と認証トークンを含みます。\n    \n    - **user** (object): 新しく登録されたユーザーの情報。\n        \n        - **id** (string): ユーザーの一意識別子。\n            \n        - **username** (string): ユーザーのユーザー名。\n            \n        - **firstName** (string または null): ユーザーの名前、または提供されなかった場合はnull。\n            \n        - **firstNameRuby** (string または null): 名前のふりがな表記、または提供されなかった場合はnull。\n            \n        - **lastName** (string または null): ユーザーの姓、または提供されなかった場合はnull。\n            \n        - **lastNameRuby** (string または null): 姓のふりがな表記、または提供されなかった場合はnull。\n            \n        - **role** (integer): ユーザーの権限。\n            \n        - **createdAt** (string): ユーザーが作成された日時のタイムスタンプ。\n            \n        - **createdBy** (string): ユーザーを作成した人の識別子。\n            \n        - **updatedAt** (string): ユーザーが最後に更新された日時のタイムスタンプ。\n            \n        - **updatedBy** (string): ユーザーを最後に更新した人の識別子。\n            \n        - **deleted** (boolean): ユーザーが削除済みとしてマークされているかどうかを示します。\n            \n    - **token** (string): ユーザーの認証トークン。\n        \n\n#### レスポンスの例\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"user\": {\n      \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n      \"username\": \"admin\",\n      \"firstName\": null,\n      \"firstNameRuby\": null,\n      \"lastName\": null,\n      \"lastNameRuby\": null,\n      \"role\": 1,\n      \"createdAt\": \"2025-07-24T12:00:00.000Z\",\n      \"createdBy\": \"system\",\n      \"updatedAt\": \"2025-07-24T12:00:00.000Z\",\n      \"updatedBy\": \"system\",\n      \"deleted\": false\n    },\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n  },\n  \"message\": \"\"\n}\n```\n\nこのエンドポイントは、ユーザー管理に不可欠であり、アプリケーション内でのユーザーアカウントの作成を可能にします。"
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"pm.environment.set(\"token\", response.data.token);\r",
									"pm.environment.set(\"userId\", response.data.user.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"password\"\r\n}\r\n"
						},
						"url": {
							"raw": "http://localhost:3000/api/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "## ログインエンドポイント\n\nこのエンドポイントは、ユーザーの認証を行い、アクセストークンを取得するために使用されます。提供された認証情報を検証し、認証が成功すると、後続のリクエストで使用するトークンとともにユーザーの詳細情報を返します。\n\n### リクエスト\n\n- **メソッド**: POST\n    \n- **URL**: `http://localhost/api/auth/login`\n    \n- **Content-Type**: application/json\n    \n\n#### リクエストボディ\n\nリクエストボディはJSON形式である必要があり、以下のパラメータを含む必要があります：\n\n- **username** (string): ログインを試みるユーザーのユーザー名。\n    \n- **password** (string): ユーザー名に関連付けられたパスワード。\n    \n\n**リクエストボディの例:**\n\n```json\n{\n  \"username\": \"admin\",\n  \"password\": \"password\"\n}\n```\n\n### レスポンス\n\nログインが成功すると、サーバーはステータスコード200で応答し、以下の構造を含むJSONオブジェクトを返します：\n\n- **success** (boolean): ログインが成功したかどうかを示します。\n    \n- **data** (object): ユーザー情報と認証トークンを含みます。\n    \n    - **user** (object): 認証されたユーザーの情報。\n        \n        - **id** (string): ユーザーの一意識別子。\n            \n        - **username** (string): ユーザーのユーザー名。\n            \n        - **firstName** (string): ユーザーの名前。\n            \n        - **firstNameRuby** (string): 名前のふりがな表記。\n            \n        - **lastName** (string): ユーザーの姓。\n            \n        - **lastNameRuby** (string): 姓のふりがな表記。\n            \n        - **role** (integer): ユーザーの権限（例：管理者、一般ユーザー）。\n            \n        - **createdAt** (string): ユーザーが作成された日時のタイムスタンプ。\n            \n        - **createdBy** (string): このユーザーを作成したユーザーの識別子。\n            \n        - **updatedAt** (string): ユーザーが最後に更新された日時のタイムスタンプ。\n            \n        - **updatedBy** (string): このユーザーを最後に更新したユーザーの識別子。\n            \n        - **deleted** (boolean): ユーザーアカウントが削除済みとしてマークされているかどうかを示します。\n            \n    - **token** (string): 後続のリクエストで使用する認証トークン。\n        \n- **message** (string): レスポンスに関する追加メッセージ。\n    \n\n**レスポンスの例:**\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"user\": {\n      \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n      \"username\": \"admin\",\n      \"firstName\": null,\n      \"firstNameRuby\": null,\n      \"lastName\": null,\n      \"lastNameRuby\": null,\n      \"role\": 1,\n      \"createdAt\": \"2025-07-24T10:00:00.000Z\",\n      \"createdBy\": \"system\",\n      \"updatedAt\": \"2025-07-24T10:00:00.000Z\",\n      \"updatedBy\": \"system\",\n      \"deleted\": false\n    },\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n  },\n  \"message\": \"\"\n}\n```"
					},
					"response": []
				},
				{
					"name": "logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/auth/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"logout"
							]
						},
						"description": "## ログアウト API\n\nこのエンドポイントは、アプリケーションからユーザーをログアウトさせるために使用します。POST リクエストにより、ユーザーのセッションを終了し、認証トークンをクリアします。\n\n### リクエスト\n\n- メソッド: POST\n- URL: `http://localhost:3000/api/auth/logout`\n\n#### リクエストボディ\n\nこのリクエストにボディは不要です。エンドポイントに対して POST リクエストを送るだけで、ログアウト処理が開始されます。\n\n### レスポンス\n\nログアウトが成功すると、サーバーは次の構造の JSON オブジェクトで応答します。\n\n- success（boolean）: ログアウトが成功したかどうかを示します。\n- message（string）: ログアウト処理に関する追加のメッセージ（空の場合があります）。\n\n#### レスポンス例\n\n```json\n{\n  \"success\": true,\n  \"message\": \"\"\n}\n```\n\n### ステータスコード\n\n- 200 OK: ログアウトに成功しました。"
					},
					"response": []
				}
			]
		},
		{
			"name": "todos",
			"item": [
				{
					"name": "[id]",
					"item": [
						{
							"name": "get",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/api/todos/{{todosId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"todos",
										"{{todosId}}"
									]
								},
								"description": "# Todoアイテムの取得\n\nこのエンドポイントは、一意識別子によって特定のTodoアイテムを取得することを可能にします。\n\n## リクエスト\n\n- **メソッド**: `GET`\n    \n- **URL**: `http://localhost/api/todos/{{todosId}}`\n    \n\n### 認証\n\nこのエンドポイントには認証が必要です。リクエストヘッダーに有効な認証トークンを含めるようにしてください。\n\n### リクエストパラメータ\n\n- **todosId** (パスパラメータ): 取得したいTodoアイテムの一意識別子。これは既存のTodoアイテムに対応する有効なIDである必要があります。\n    \n\n## レスポンス\n\n### 成功レスポンス\n\n- **ステータスコード**: `200 OK`\n    \n- **レスポンスボディ**: レスポンスには、取得されたTodoアイテムの詳細が含まれ、タイトル、説明、ステータスなどのプロパティが含まれます。レスポンスボディの正確な構造は、Todoアイテムによって異なります。\n    \n\n### 可能なエラーレスポンス\n\n- **404 Not Found**: このステータスコードは、指定された`todosId`のTodoアイテムが存在しないことを示します。\n    \n- **401 Unauthorized**: このステータスコードは、リクエストに有効な認証資格情報がないことを示します。\n    \n\n## 例\n\n### リクエスト例\n\n```http\nGET http://localhost/api/todos/12345\nAuthorization: Bearer your-auth-token\n```\n\n### 成功レスポンス例\n\n```json\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"title\": \"Sample Todo\",\n    \"descriptions\": \"This is a sample todo item.\",\n    \"completed\": true,\n    \"userId\": \"user-123\",\n    \"createdAt\": \"2025-07-24T10:00:00.000Z\",\n    \"createdBy\": \"user-123\",\n    \"updatedAt\": \"2025-07-24T11:30:00.000Z\",\n    \"updatedBy\": \"user-123\",\n    \"deleted\": false\n  }\n}\n```\n\n### エラーレスポンス例\n\n```json\n{\n  \"error\": \"Todo item not found.\"\n}\n```\n\n取得したいTodoアイテムの実際のIDで`{{todosId}}`を置き換えることを確認してください。"
							},
							"response": []
						},
						{
							"name": "update",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"updated test\",\r\n    \"descriptions\": \"updated descriptions\"\r\n}"
								},
								"url": {
									"raw": "http://localhost:3000/api/todos/{{todosId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"todos",
										"{{todosId}}"
									]
								},
								"description": "## Todoアイテムの更新\n\nこのエンドポイントは、一意識別子（`todosId`）を使用して既存のTodoアイテムを更新することを可能にします。指定されたTodoの詳細を変更する`PUT`リクエストです。\n\n### リクエスト形式\n\n- **URL**: `http://localhost/api/todos/{{todosId}}`\n    \n- **メソッド**: `PUT`\n    \n- **Content-Type**: `application/json`\n    \n\n### リクエストボディ\n\nリクエストボディはJSON形式である必要があり、以下のパラメータを含む必要があります：\n\n- **title** (string): Todoアイテムの更新されたタイトル。\n    \n- **descriptions** (string): Todoアイテムの更新された説明。\n    \n\n#### リクエストボディの例\n\n```json\n{\n  \"title\": \"updated test\",\n  \"descriptions\": \"updated descriptions\"\n}\n```\n\n### レスポンス構造\n\n更新が成功すると、レスポンスには通常、更新されたTodoアイテムの詳細が含まれ、変更が適用されたことを確認します。レスポンスの構造には、少なくとも以下のフィールドが含まれる場合があります：\n\n- **id** (string): Todoアイテムの一意識別子。\n    \n- **title** (string): Todoアイテムの更新されたタイトル。\n    \n- **descriptions** (string): Todoアイテムの更新された説明。\n    \n- **updatedAt** (string): Todoアイテムが最後に更新された日時を示すタイムスタンプ。\n    \n\n### レスポンスの例\n\n```json\n{\n  \"success\": true,\n  \"message\": \"Todo updated successfully\",\n  \"data\": {\n    \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"title\": \"updated test\",\n    \"descriptions\": \"updated descriptions\",\n    \"completed\": false,\n    \"userId\": \"user-123\",\n    \"createdAt\": \"2025-07-24T10:00:00.000Z\",\n    \"createdBy\": \"user-123\",\n    \"updatedAt\": \"2025-07-24T12:30:00.000Z\",\n    \"updatedBy\": \"user-123\",\n    \"deleted\": false\n  }\n}\n```\n\n無効な`todosId`やリクエストボディ内の必須フィールドの欠落など、更新プロセス中に発生する可能性のあるエラーを適切に処理するようにしてください。"
							},
							"response": []
						},
						{
							"name": "remove",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/api/todos/{{todosId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"todos",
										"{{todosId}}"
									]
								},
								"description": "## Todoアイテムの削除\n\nこのエンドポイントは、データベースから特定のTodoアイテムを削除することを可能にします。\n\n### リクエスト\n\n- **メソッド**: `DELETE`\n    \n- **エンドポイント**: `http://localhost/api/todos/{{todosId}}`\n    \n- **パスパラメータ**:\n    \n    - `todosId` (必須): 削除したいTodoアイテムの一意識別子。\n        \n\n### レスポンス\n\n削除が成功すると、APIは操作の結果を示すレスポンスを返します。期待されるレスポンス形式には、通常、確認メッセージまたは削除のステータスが含まれます。\n\n### レスポンス例\n\n- **ステータスコード**: `204 No Content` (コンテンツが返されない成功した削除を示します)\n    \n- **レスポンスボディ**: 削除が成功した際には追加情報が提供されないため、通常は空です。\n    \n\n希望するTodoアイテムを正常に削除するために、リクエストで`todosId`パラメータが正しく指定されていることを確認してください。"
							},
							"response": []
						}
					]
				},
				{
					"name": "get-all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"if (response.data && response.data.data && response.data.data.length > 0) {\r",
									"    pm.environment.set(\"todosId\", response.data.data[0].id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/todos?page=1&perPage=20&completedFilter=all&sortBy=createdAt&sortOrder=asc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"todos"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "ページ番号（1以上）"
								},
								{
									"key": "perPage",
									"value": "20",
									"description": "1ページあたりの件数（1〜100）"
								},
								{
									"key": "completedFilter",
									"value": "all",
									"description": "完了状態フィルター（all: 全件、completed: 完了済みのみ、incomplete: 未完了のみ）"
								},
								{
									"key": "sortBy",
									"value": "createdAt",
									"description": "ソート基準（createdAt, updatedAt, title）"
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"description": "ソート順序（asc: 昇順、desc: 降順）"
								}
							]
						},
						"description": "### APIエンドポイント: Todo一覧取得\n\n**メソッド:** `GET`\n\n**URL:** `http://localhost:3000/api/todos`\n\n#### 説明\n\nこのエンドポイントは、認証されたユーザーが所有するTodoアイテムの一覧を取得します。ページネーション、フィルタリング、ソート機能をサポートします。\n\n#### 認証\n\nこのエンドポイントには認証が必要です。Authorizationヘッダーに有効なJWTトークンを含めてください。\n\n#### クエリパラメータ\n\n- **page** (number, 任意): ページ番号（1以上）。デフォルト: 1\n- **perPage** (number, 任意): 1ページあたりの件数（1〜100）。デフォルト: 20\n- **completedFilter** (string, 任意): 完了状態フィルター\n  - `all`: 全件（デフォルト）\n  - `completed`: 完了済みのみ\n  - `incomplete`: 未完了のみ\n- **sortBy** (string, 任意): ソート基準。デフォルト: createdAt\n  - `createdAt`: 作成日時\n  - `updatedAt`: 更新日時\n  - `title`: タイトル\n- **sortOrder** (string, 任意): ソート順序。デフォルト: asc\n  - `asc`: 昇順\n  - `desc`: 降順\n\n#### レスポンス構造\n\nリクエストが成功すると、レスポンスは以下の構造を持つJSONオブジェクトを返します：\n\n```json\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"data\": [\n      {\n        \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n        \"title\": \"買い物リスト作成\",\n        \"descriptions\": \"今週の食材を買う\",\n        \"completed\": false,\n        \"userId\": \"user-123\",\n        \"createdAt\": \"2025-07-24T10:00:00.000Z\",\n        \"createdBy\": \"user-123\",\n        \"updatedAt\": \"2025-07-24T10:00:00.000Z\",\n        \"updatedBy\": \"user-123\",\n        \"deleted\": false\n      }\n    ],\n    \"total\": 50,\n    \"page\": 1,\n    \"perPage\": 20,\n    \"totalPages\": 3\n  }\n}\n```\n\n#### エラーレスポンス\n\n- **401 Unauthorized**: 認証が必要です\n- **500 Internal Server Error**: サーバーエラー"
					},
					"response": []
				},
				{
					"name": "create",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"test\",\r\n    \"descriptions\": \"descriptions\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/todos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"todos"
							]
						},
						"description": "## Todoアイテムの追加\n\nこのエンドポイントは、`/api/todos`エンドポイントにPOSTリクエストを送信することで、ユーザーが新しいTodoアイテムを作成することを可能にします。\n\n### リクエストメソッド\n\n- **POST**\n    \n\n### リクエストURL\n\n- `http://localhost:3000/api/todos`\n    \n\n### 認証\n\nこのエンドポイントには認証が必要です。Authorizationヘッダーに有効なJWTトークンを含めてください。\n\n### リクエストボディ\n\nリクエストボディはJSON形式である必要があり、以下のパラメータを含む必要があります：\n\n- **title** (string, 必須): Todoアイテムのタイトル（1〜32文字）。\n- **descriptions** (string, 任意): Todoアイテムの詳細な説明（128文字以下）。\n    \n\n#### リクエストボディの例\n\n```json\n{\n  \"title\": \"test\",\n  \"descriptions\": \"descriptions\"\n}\n```\n\n### 期待されるレスポンス\n\nリクエストが成功すると、サーバーはステータスコード200で応答します。レスポンスには新しく作成されたTodoアイテムの詳細が含まれます。\n\n### レスポンス形式\n\n```json\n{\n  \"success\": true,\n  \"message\": \"Todo created successfully\",\n  \"data\": {\n    \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"title\": \"test\",\n    \"descriptions\": \"descriptions\",\n    \"completed\": false,\n    \"userId\": \"user-123\",\n    \"createdAt\": \"2025-07-24T12:00:00.000Z\",\n    \"createdBy\": \"user-123\",\n    \"updatedAt\": \"2025-07-24T12:00:00.000Z\",\n    \"updatedBy\": \"user-123\",\n    \"deleted\": false\n  }\n}\n```\n\n### エラーレスポンス\n\n- **400 Bad Request**: バリデーションエラー（タイトルが必須、文字数制限など）\n- **401 Unauthorized**: 認証エラー\n- **500 Internal Server Error**: サーバーエラー"
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "me",
					"item": [
						{
							"name": "password",
							"item": [
								{
									"name": "change-password",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"currentPassword\": \"currentSecurePassword\",\r\n  \"newPassword\": \"newSecurePassword123\",\r\n  \"confirmPassword\": \"newSecurePassword123\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/api/users/me/password",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"users",
												"me",
												"password"
											]
										},
										"description": "## ユーザーパスワードの更新\n\nこのエンドポイントは、ユーザーが自分のパスワードを更新するためのものです。正確性を確保するために、現在のパスワード・新しいパスワード・新しいパスワードの確認が必要です。\n\n### リクエスト\n\n- メソッド: PUT\n- URL: `http://localhost:3000/api/users/me/password`\n\n### リクエストボディ\n\nリクエストボディは JSON 形式で、以下のパラメータを含める必要があります。\n\n- currentPassword（string）: 現在のパスワード。パスワード変更を許可する前にユーザーを認証するために必要です。\n- newPassword（string）: 設定したい新しいパスワード。アプリケーションのパスワード複雑性要件を満たす必要があります。\n- confirmPassword（string）: 新しいパスワードの確認。更新を進めるには newPassword と一致している必要があります。\n\n### 期待されるレスポンス\n\nパスワードの更新に成功すると、処理が成功したことを示すレスポンスが返されます。正確なレスポンス構造は実装によって異なる場合がありますが、一般的には成功メッセージや、場合によっては更新後のユーザー情報が含まれます。\n\n### 注意事項\n\n- 新しいパスワードが十分に強力で、指定されたセキュリティ基準を満たしていることを確認してください。\n- currentPassword が既存のパスワードと一致しない場合、リクエストは失敗し、適切なエラーメッセージが返されます。\n- 本番環境では常に HTTPS を使用し、パスワードなどの機微情報を保護してください。"
									},
									"response": []
								}
							]
						},
						{
							"name": "todos",
							"item": [
								{
									"name": "stats",
									"item": [
										{
											"name": "get",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:3000/api/users/me/todos/stats",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "3000",
													"path": [
														"api",
														"users",
														"me",
														"todos",
														"stats"
													]
												},
												"description": "## ユーザーのTodo統計を取得\n\nこのエンドポイントは、ユーザーのTodo項目に関する統計情報を取得します。Todoの総数、完了数、未完了数、全体の完了率の概要を提供します。\n\n### リクエスト\n\n- メソッド: GET\n- URL: `http://localhost:3000/api/users/me/todos/stats`\n\n#### リクエストボディ\n\nこのエンドポイントにリクエストボディは不要です。\n\n### レスポンス\n\nリクエストが成功すると、サーバーは次の構造の JSON オブジェクトで応答します。\n\n- success（boolean）: リクエストが成功したかどうか\n- data（object）: ユーザーのTodo統計を含むオブジェクト\n  - totalTodos（integer）: ユーザーに関連するTodoの総数\n  - completedTodos（integer）: 完了済みのTodo数\n  - pendingTodos（integer）: 未完了のTodo数\n  - completionRate（float）: 完了率（パーセンテージ）\n\n#### レスポンス例\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"totalTodos\": 15,\n    \"completedTodos\": 9,\n    \"pendingTodos\": 6,\n    \"completionRate\": 60\n  }\n}\n```\n\nこのエンドポイントは、ユーザーが自分のTodo管理状況を素早く把握し、時間の経過に伴う進捗を追跡するのに役立ちます。"
											},
											"response": []
										}
									]
								},
								{
									"name": "get-list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:3000/api/users/me/todos",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"users",
												"me",
												"todos"
											]
										},
										"description": "## ログインユーザーのTodo一覧取得\n\nこのエンドポイントは、現在認証されているユーザーに関連するTodo一覧を取得します。`GET` リクエストで、構造化された JSON 形式のTodoを返します。\n\n### リクエスト形式\n\n- メソッド: GET\n    \n- URL: `http://localhost:3000/api/users/me/todos`\n    \n\n### レスポンス形式\n\n成功時、API は次の構造の JSON オブジェクトを返します。\n\n- success: リクエストが成功したかを示す真偽値\n    \n- data: Todo オブジェクトの配列。各オブジェクトは次のフィールドを含みます:\n    - id: Todo の一意な識別子\n        \n    - title: Todo のタイトル\n        \n    - descriptions: Todo の説明\n        \n    - completed: Todo が完了しているかを示す真偽値\n        \n    - createdAt: Todo の作成日時\n        \n    - createdBy: Todo を作成したユーザーの識別子\n        \n    - updatedAt: Todo の最終更新日時\n        \n    - updatedBy: Todo を最後に更新したユーザーの識別子\n        \n    - deleted: Todo が削除済みかを示す真偽値\n        \n    - userId: Todo に紐づくユーザーの識別子\n        \n\n### レスポンス例\n\n``` json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n      \"title\": \"買い物リスト作成\",\n      \"descriptions\": \"今週の食材を買う\",\n      \"completed\": false,\n      \"userId\": \"user-123\",\n      \"createdAt\": \"2025-07-24T10:00:00.000Z\",\n      \"createdBy\": \"user-123\",\n      \"updatedAt\": \"2025-07-24T10:00:00.000Z\",\n      \"updatedBy\": \"user-123\",\n      \"deleted\": false\n    }\n  ]\n}\n\n ```\n\nこのエンドポイントは、ユーザーが自分のTodoを効率的に管理・閲覧するのに役立ちます。"
									},
									"response": []
								}
							]
						},
						{
							"name": "get",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/api/users/me",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"users",
										"me"
									]
								},
								"description": "## ユーザープロフィール取得\n\nこのエンドポイントは、現在認証されているユーザーのプロフィール情報を取得します。\n\n### リクエスト\n\n- **メソッド**: GET\n    \n- **URL**: `http://localhost/api/users/me`\n    \n\n### レスポンス\n\nリクエストが成功すると、レスポンスは以下の構造を持つJSONオブジェクトを返します：\n\n- **success** (boolean): リクエストが成功したかどうかを示します。\n    \n- **data** (object): ユーザーのプロフィール情報を含みます：\n    \n    - **id** (string): ユーザーの一意識別子。\n        \n    - **username** (string): ユーザーのユーザー名。\n        \n    - **firstName** (string): ユーザーの名前。\n        \n    - **firstNameRuby** (string): 名前のふりがな（該当する場合）。\n        \n    - **lastName** (string): ユーザーの姓。\n        \n    - **lastNameRuby** (string): 姓のふりがな（該当する場合）。\n        \n    - **role** (integer): ユーザーの権限（例：管理者、一般ユーザー）。\n        \n    - **createdAt** (string): ユーザーが作成された日時のタイムスタンプ。\n        \n    - **createdBy** (string): このユーザーを作成したユーザーの識別子。\n        \n    - **updatedAt** (string): ユーザーのプロフィールが最後に更新された日時のタイムスタンプ。\n        \n    - **updatedBy** (string): このユーザーを最後に更新したユーザーの識別子。\n        \n    - **deleted** (boolean): ユーザーが削除済みとしてマークされているかどうかを示します。\n        \n- **message** (string): レスポンスに付随するメッセージ（もしあれば）。\n    \n\n### 注意事項\n\n- ユーザープロフィールにアクセスするために、適切な認証を行ったリクエストを送信することを確認してください。"
							},
							"response": []
						},
						{
							"name": "patch",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"firstName\",\r\n  \"lastName\": \"lastName\",\r\n  \"firstNameRuby\": \"firstNameRuby\",\r\n  \"lastNameRuby\": \"lastNameRuby\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/users/me",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"users",
										"me"
									]
								},
								"description": "### ユーザー情報の更新\n\nこのエンドポイントは、認証されたユーザーが個人情報を更新することを可能にします。リクエストは、名前やふりがな表記などのユーザーの詳細情報を変更します。\n\n#### リクエスト\n\n- **メソッド:** PATCH\n    \n- **URL:** `http://localhost/api/users/me`\n    \n- **Content-Type:** application/json\n    \n\n#### リクエストボディパラメータ\n\nリクエストボディは、以下のパラメータを含むJSONオブジェクトである必要があります：\n\n- `firstName` (string): ユーザーの名前。\n    \n- `lastName` (string): ユーザーの姓。\n    \n- `firstNameRuby` (string): ユーザーの名前のふりがな。\n    \n- `lastNameRuby` (string): ユーザーの姓のふりがな。\n    \n\nリクエストボディの例：\n\n```json\n{\n  \"firstName\": \"firstName\",\n  \"lastName\": \"lastName\",\n  \"firstNameRuby\": \"firstNameRuby\",\n  \"lastNameRuby\": \"lastNameRuby\"\n}\n```\n\n#### レスポンス\n\n更新が成功すると、APIは以下の構造を持つレスポンスを返します：\n\n- **ステータスコード:** 200 OK\n    \n- **Content-Type:** application/json\n    \n\nレスポンスボディには以下が含まれます：\n\n- `success` (boolean): 更新が成功したかどうかを示します。\n    \n- `data` (object): 更新されたユーザー情報を含みます：\n    \n    - `id` (string): ユーザーの一意識別子。\n        \n    - `username` (string): ユーザーのユーザー名。\n        \n    - `firstName` (string): 更新された名前。\n        \n    - `firstNameRuby` (string): 更新された名前のふりがな。\n        \n    - `lastName` (string): 更新された姓。\n        \n    - `lastNameRuby` (string): 更新された姓のふりがな。\n        \n    - `role` (integer): ユーザーの権限識別子。\n        \n    - `createdAt` (string): ユーザーが作成された日時のタイムスタンプ。\n        \n    - `createdBy` (string): ユーザーを作成した人の識別子。\n        \n    - `updatedAt` (string): 最後の更新日時のタイムスタンプ。\n        \n    - `updatedBy` (string): 最後にユーザーを更新した人の識別子。\n        \n    - `deleted` (boolean): ユーザーが削除済みとしてマークされているかどうかを示します。\n        \n\n成功レスポンスの例：\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"\",\n    \"username\": \"\",\n    \"firstName\": \"\",\n    \"firstNameRuby\": \"\",\n    \"lastName\": \"\",\n    \"lastNameRuby\": \"\",\n    \"role\": 0,\n    \"createdAt\": \"\",\n    \"createdBy\": \"\",\n    \"updatedAt\": \"\",\n    \"updatedBy\": \"\",\n    \"deleted\": true\n  },\n  \"message\": \"\"\n}\n```\n\nこのエンドポイントは、ユーザーがプロフィール情報を最新の状態に保つために不可欠です。"
							},
							"response": []
						}
					]
				},
				{
					"name": "[id]",
					"item": [
						{
							"name": "get",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/api/users/{{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"users",
										"{{userId}}"
									]
								},
								"description": "## ユーザー詳細情報取得\n\nこのエンドポイントは、一意のユーザーIDで識別される特定のユーザーの詳細情報を取得します。\n\n### リクエスト\n\n- **メソッド**: `GET`\n    \n- **エンドポイント**: `http://localhost/api/users/{{userId}}`\n    \n- **パラメータ**:\n    \n    - `userId` (パスパラメータ): 詳細情報を要求するユーザーの一意識別子。\n        \n\n### レスポンス\n\n- **ステータスコード**: `200 OK`\n    \n- **Content-Type**: `application/json`\n    \n- **レスポンスボディ**:\n    \n    - `success` (boolean): リクエストが成功したかどうかを示します。\n        \n    - `data` (object): ユーザーの詳細情報を含みます：\n        \n        - `id` (string): ユーザーの一意ID。\n            \n        - `username` (string): ユーザーのユーザー名。\n            \n        - `firstName` (string): ユーザーの名前。\n            \n        - `firstNameRuby` (string): 名前のふりがな表記。\n            \n        - `lastName` (string): ユーザーの姓。\n            \n        - `lastNameRuby` (string): 姓のふりがな表記。\n            \n        - `role` (integer): ユーザーの権限（例：管理者、一般ユーザー）。\n            \n        - `createdAt` (string): ユーザーが作成された日時のタイムスタンプ。\n            \n        - `createdBy` (string): ユーザーを作成した人の識別子。\n            \n        - `updatedAt` (string): ユーザーが最後に更新された日時のタイムスタンプ。\n            \n        - `updatedBy` (string): ユーザーを最後に更新した人の識別子。\n            \n        - `deleted` (boolean): ユーザーが削除済みとしてマークされているかどうかを示します。\n            \n    - `message` (string): リクエストに関連する追加メッセージ。\n        \n\n### レスポンス例\n\n```json\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"username\": \"john_doe\",\n    \"firstName\": \"John\",\n    \"firstNameRuby\": \"ジョン\",\n    \"lastName\": \"Doe\",\n    \"lastNameRuby\": \"ドウ\",\n    \"role\": 4,\n    \"createdAt\": \"2025-07-24T10:00:00.000Z\",\n    \"createdBy\": \"admin\",\n    \"updatedAt\": \"2025-07-24T10:00:00.000Z\",\n    \"updatedBy\": \"admin\",\n    \"deleted\": false\n  }\n}\n```"
							},
							"response": []
						},
						{
							"name": "patch",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"firstName\",\r\n  \"lastName\": \"lastName\",\r\n  \"firstNameRuby\": \"firstNameRuby\",\r\n  \"lastNameRuby\": \"lastNameRuby\"\r\n}"
								},
								"url": {
									"raw": "http://localhost:3000/api/users/{{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"users",
										"{{userId}}"
									]
								},
								"description": "### ユーザー情報の更新\n\nこのエンドポイントは、`userId`で識別される特定のユーザーの詳細情報を更新することを可能にします。ユーザーの名前、姓、およびそれぞれのふりがな表記を変更できます。\n\n#### リクエスト\n\n- **メソッド:** PATCH\n    \n- **URL:** `http://localhost/api/users/{{userId}}`\n    \n- | パラメータ | 型 | 説明 |\n  |------------|----|----|\n  | `firstName` | string | ユーザーの名前。 |\n  | `lastName` | string | ユーザーの姓。 |\n  | `firstNameRuby` | string | ユーザーの名前のふりがな表記。 |\n  | `lastNameRuby` | string | ユーザーの姓のふりがな表記。 |\n    \n\n#### レスポンス\n\n更新が成功すると、レスポンスは`200`のステータスコードと以下のフィールドを含むJSONオブジェクトを返します：\n\n- **success**: 更新が成功したかどうかを示すブール値。\n    \n- **data**: 更新されたユーザー情報を含むオブジェクト：\n    \n    - `id`: ユーザーの一意識別子。\n        \n    - `username`: ユーザーのユーザー名。\n        \n    - `firstName`: 更新された名前。\n        \n    - `firstNameRuby`: 更新された名前のふりがな表記。\n        \n    - `lastName`: 更新された姓。\n        \n    - `lastNameRuby`: 更新された姓のふりがな表記。\n        \n    - `role`: ユーザーの権限。\n        \n    - `createdAt`: ユーザーが作成された日時のタイムスタンプ。\n        \n    - `createdBy`: ユーザーを作成した人の識別子。\n        \n    - `updatedAt`: 最後の更新日時のタイムスタンプ。\n        \n    - `updatedBy`: 最後にユーザーを更新した人の識別子。\n        \n    - `deleted`: ユーザーが削除済みとしてマークされているかどうかを示すブール値。\n        \n- **message**: レスポンスに関する追加コンテキストを提供するメッセージ。\n    \n\n#### 注意事項\n\n- `userId`が有効で、システム内の既存ユーザーに対応していることを確認してください。\n    \n- 処理中のエラーを避けるため、リクエストボディが適切にJSON形式でフォーマットされている必要があります。"
							},
							"response": []
						},
						{
							"name": "remove",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/api/users/{{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"users",
										"{{userId}}"
									]
								},
								"description": "## ユーザー削除\n\nこのエンドポイントは、一意識別子（userId）を指定してシステムからユーザーを削除することを可能にします。\n\n### リクエストメソッド\n\n`DELETE`\n\n### エンドポイント\n\n`http://localhost/api/users/{{userId}}`\n\n### パラメータ\n\n- `userId` (パスパラメータ): 削除したいユーザーの一意識別子。このパラメータは必須です。\n    \n\n### 期待されるレスポンス\n\nユーザーの削除が成功すると、APIは操作の結果を示すステータスコードで応答します。通常、削除が成功した場合は`204 No Content`ステータスを返し、リクエストが正常に処理され、レスポンスに送信する追加コンテンツがないことを示します。\n\nエラーが発生した場合（例：ユーザーが存在しない場合）、APIは`404 Not Found`ステータスと、問題の詳細を説明するエラーメッセージを返す場合があります。"
							},
							"response": []
						}
					]
				},
				{
					"name": "get",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/users?page=1&perPage=20&sortBy=created_at&sortOrder=asc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "ページ番号（1以上）"
								},
								{
									"key": "perPage",
									"value": "20",
									"description": "1ページあたりの件数（1〜100）"
								},
								{
									"key": "id",
									"value": "",
									"description": "ユーザーIDで部分一致検索",
									"disabled": true
								},
								{
									"key": "username",
									"value": "",
									"description": "ユーザー名で部分一致検索",
									"disabled": true
								},
								{
									"key": "firstName",
									"value": "",
									"description": "名前で部分一致検索",
									"disabled": true
								},
								{
									"key": "firstNameRuby",
									"value": "",
									"description": "名前（ふりがな）で部分一致検索",
									"disabled": true
								},
								{
									"key": "lastName",
									"value": "",
									"description": "姓で部分一致検索",
									"disabled": true
								},
								{
									"key": "lastNameRuby",
									"value": "",
									"description": "姓（ふりがな）で部分一致検索",
									"disabled": true
								},
								{
									"key": "role",
									"value": "",
									"description": "ロールで検索",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "created_at",
									"description": "ソート基準（id, username, first_name, first_name_ruby, last_name, last_name_ruby, role, created_at）"
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"description": "ソート順序（asc: 昇順、desc: 降順）"
								}
							]
						},
						"description": "## APIエンドポイント: ユーザー一覧取得\n\n### リクエスト\n\n**メソッド:** GET  \n**URL:** `http://localhost:3000/api/users`\n\n### 説明\n\nこのエンドポイントは、管理者（ADMIN=1）またはマネージャー（MANAGER=2）が全ユーザー一覧を取得できます。フィルタリング、ソート、ページネーション機能をサポートします。\n\n### 認証\n\nこのエンドポイントには管理者権限が必要です。Authorizationヘッダーに有効なJWTトークンを含めてください。\n\n### クエリパラメータ\n\n- **page** (number, 任意): ページ番号（1以上）。デフォルト: 1\n- **perPage** (number, 任意): 1ページあたりの件数（1〜100）。デフォルト: 20\n- **id** (string, 任意): ユーザーIDで部分一致検索\n- **username** (string, 任意): ユーザー名で部分一致検索\n- **firstName** (string, 任意): 名前で部分一致検索\n- **firstNameRuby** (string, 任意): 名前（ふりがな）で部分一致検索\n- **lastName** (string, 任意): 姓で部分一致検索\n- **lastNameRuby** (string, 任意): 姓（ふりがな）で部分一致検索\n- **role** (number, 任意): ロールで検索\n- **sortBy** (string, 任意): ソート基準。デフォルト: created_at\n  - `id`, `username`, `first_name`, `first_name_ruby`, `last_name`, `last_name_ruby`, `role`, `created_at`\n- **sortOrder** (string, 任意): ソート順序。デフォルト: asc\n  - `asc`: 昇順\n  - `desc`: 降順\n\n### レスポンス構造\n\nリクエストが成功すると、レスポンスは以下の構造を持つJSONオブジェクトを返します：\n\n```json\n{\n  \"success\": true,\n  \"message\": \"ユーザー一覧を取得しました\",\n  \"data\": {\n    \"data\": [\n      {\n        \"id\": \"user-123\",\n        \"username\": \"john_doe\",\n        \"firstName\": \"John\",\n        \"firstNameRuby\": \"ジョン\",\n        \"lastName\": \"Doe\",\n        \"lastNameRuby\": \"ドウ\",\n        \"role\": 8,\n        \"createdAt\": \"2025-07-24T10:00:00.000Z\",\n        \"updatedAt\": \"2025-07-24T10:00:00.000Z\"\n      }\n    ],\n    \"pagination\": {\n      \"currentPage\": 1,\n      \"totalPages\": 5,\n      \"totalUsers\": 100,\n      \"perPage\": 20\n    }\n  }\n}\n```\n\n### エラーレスポンス\n\n- **400 Bad Request**: クエリパラメータのバリデーションエラー\n- **401 Unauthorized**: 認証エラー\n- **403 Forbidden**: 管理者権限が必要です\n- **500 Internal Server Error**: サーバーエラー"
					},
					"response": []
				},
				{
					"name": "register",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"user\",\r\n  \"password\": \"password\",\r\n  \"firstName\": \"\",\r\n  \"firstNameRuby\": \"\",\r\n  \"lastName\": \"\",\r\n  \"lastNameRuby\": \"\",\r\n  \"role\": 1\r\n}\r\n"
						},
						"url": {
							"raw": "http://localhost:3000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							]
						},
						"description": "## APIエンドポイント: ユーザー作成\n\n### メソッド\n\n`POST`\n\n### URL\n\n`http://localhost:3000/api/users`\n\n### 説明\n\nこのエンドポイントは、管理者権限を持つユーザーがシステムに新しいユーザーを作成するために使用されます。リクエストボディでユーザーの詳細情報を受け取り、ユーザー作成プロセスの成功または失敗を示すレスポンスを返します。\n\n### 認証\n\nこのエンドポイントには管理者権限（ADMIN または MANAGER）が必要です。Authorizationヘッダーに有効なJWTトークンを含めてください。\n\n### リクエストパラメータ\n\nリクエストボディはJSON形式で送信する必要があり、以下のパラメータを含む必要があります：\n\n- **username** (string, 必須): ユーザーの一意識別子（1〜50文字）。\n- **password** (string, 必須): ユーザーアカウントのパスワード（6文字以上）。\n- **firstName** (string, 任意): ユーザーの名前（50文字以下）。\n- **firstNameRuby** (string, 任意): 名前のふりがな表記（50文字以下）。\n- **lastName** (string, 任意): ユーザーの姓（50文字以下）。\n- **lastNameRuby** (string, 任意): 姓のふりがな表記（50文字以下）。\n- **role** (integer, 任意): ユーザーに割り当てられる権限。\n    \n\n### リクエストボディの例\n\n```json\n{\n  \"username\": \"user\",\n  \"password\": \"password\",\n  \"firstName\": \"\",\n  \"firstNameRuby\": \"\",\n  \"lastName\": \"\",\n  \"lastNameRuby\": \"\",\n  \"role\": 1\n}\n```\n\n### レスポンス形式\n\nユーザーの作成が成功すると、APIは以下の構造でJSON形式のレスポンスを返します：\n\n```json\n{\n  \"success\": true,\n  \"message\": \"新規ユーザーを作成しました\",\n  \"data\": {\n    \"id\": \"user-456\",\n    \"username\": \"user\",\n    \"firstName\": \"\",\n    \"firstNameRuby\": \"\",\n    \"lastName\": \"\",\n    \"lastNameRuby\": \"\",\n    \"role\": 1,\n    \"createdAt\": \"2025-07-24T12:00:00.000Z\",\n    \"updatedAt\": \"2025-07-24T12:00:00.000Z\"\n  }\n}\n```\n\n### エラーレスポンス\n\n- **400 Bad Request**: 入力データのバリデーションエラー\n- **401 Unauthorized**: 認証エラー\n- **403 Forbidden**: 管理者権限が必要です\n- **409 Conflict**: ユーザー名が既に使用されています\n- **500 Internal Server Error**: サーバーエラー"
					},
					"response": []
				}
			]
		}
	]
}